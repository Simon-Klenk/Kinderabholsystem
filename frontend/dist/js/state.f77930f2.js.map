{"version":3,"file":"js/state.f77930f2.js","mappings":"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","sources":["webpack://kinderabholung/./src/views/EmergencyView.vue","webpack://kinderabholung/./src/views/EmergencyView.vue?25e9","webpack://kinderabholung/./src/views/StateView.vue","webpack://kinderabholung/./src/components/MessageItem.vue","webpack://kinderabholung/./src/components/MessageItem.vue?ae2b","webpack://kinderabholung/./src/views/StateView.vue?7993"],"sourcesContent":["<template>\n  <div class=\"message-create\">\n    <!-- Title of the message creation form -->\n    <h2 class=\"message-title\">Notfall - Hilfe anfordern</h2>\n\n    <!-- Raspberry Pi Status -->\n    <p v-if=\"isRaspberryOnline\" class=\"status-online\"></p>\n    <p v-else class=\"status-offline\">\n      ❌ System funktioniert aktuell nicht - AV kann nicht benachrichtigt\n      werden!!\n    </p>\n\n    <!-- Form for creating a new emergency message -->\n    <form @submit.prevent=\"createMessage\">\n      <p class=\"label\">NOTFALL</p>\n      <div>\n        <!-- Input the emergeny person -->\n        <input\n          type=\"text\"\n          id=\"content\"\n          v-model=\"message.content\"\n          placeholder=\"Wer wird benötigt?\"\n          @input=\"validateInput\"\n          required\n        />\n      </div>\n\n      <!-- Submit button, disabled if form is not valid, submitting, or Raspberry Pi is offline -->\n      <button\n        type=\"submit\"\n        :disabled=\"!isValid || isSubmitting || !isRaspberryOnline\"\n      >\n        Nachricht senden\n      </button>\n    </form>\n\n    <!-- Success message displayed when the message is successfully sent -->\n    <div v-if=\"successMessage\" class=\"success\">\n      <p>Nachricht erfolgreich gesendet!</p>\n    </div>\n\n    <!-- Error message displayed if there is an issue with the submission -->\n    <div v-if=\"errorMessage\" class=\"error\">\n      <p>{{ errorMessage }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      // Message object containing the content and status of the message\n      message: { content: \"\", status: \"sent\" },\n      successMessage: null, // Stores success message when the message is sent\n      errorMessage: null, // Stores error message in case of an issue\n      isValid: false, // Flag indicating if the input is valid\n      isSubmitting: false, // Flag indicating if the message is being sent\n      isRaspberryOnline: false, // Flag to check if Raspberry Pi is available\n    };\n  },\n  methods: {\n    /**\n     * Checks if the Raspberry Pi is running by making a GET request to the Django API.\n     * Updates `isRaspberryOnline` based on the response.\n     */\n    async checkRaspberryStatus() {\n      try {\n        console.log(\"Prüfe Raspberry Pi Status...\");\n        const response = await fetch(\"http://192.168.104.45/api/live/\", {\n          method: \"GET\",\n        });\n\n        this.isRaspberryOnline = response.ok;\n\n        console.log(\"Raspberry Online Status:\", this.isRaspberryOnline);\n      } catch (error) {\n        this.isRaspberryOnline = false;\n        console.log(\"Fehler beim Abrufen des Status:\", error);\n      }\n    },\n\n    /**\n     * Validates the input: checks format and length.\n     * The input must follow the format \"Vorname N.\" (first name + initial).\n     */\n    validateInput() {\n      const maxLength = 35;\n      const isLengthValid = this.message.content.length <= maxLength;\n\n      // If the input length exceeds the limit, show an error message\n      if (!isLengthValid) {\n        this.errorMessage = `Die Eingabe darf maximal ${maxLength} Zeichen lang sein.`;\n        this.isValid = false;\n        this.isValid = isLengthValid; // Set valid flag\n      }\n    },\n\n    /**\n     * Handles form submission and sends the message via API.\n     * Ensures the Raspberry Pi is online before sending.\n     */\n    async createMessage() {\n      if (!this.isValid || this.isSubmitting || !this.isRaspberryOnline) return; // Prevent multiple submissions\n\n      this.isSubmitting = true; // Set the status to 'sending'\n\n      try {\n        // Add the word Notfall to message\n        const messageToSend = {\n          content: `Notfall: ${this.message.content}`,\n          status: \"sent\",\n        };\n\n        // Make an API request to send the message\n        const response = await fetch(\"http://192.168.104.45/api/emergency/\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(messageToSend),\n        });\n\n        // Handle non-successful response\n        if (!response.ok)\n          throw new Error(`HTTP-Fehler! Status: ${response.status}`);\n\n        // On success, display a success message and clear any previous errors\n        this.successMessage = \"Nachricht erfolgreich gesendet!\";\n        this.errorMessage = null;\n\n        // Redirect to the state page after a short delay\n        setTimeout(() => this.$router.push(\"/state\"), 1500);\n\n        // Reset the form and disable the submit button\n        this.message.content = \"\";\n        this.message.status = \"sent\";\n        this.isValid = false;\n      } catch (error) {\n        // If an error occurs, display an error message\n        this.errorMessage = `Fehler beim Senden der Nachricht: ${error.message}`;\n        this.successMessage = null;\n      } finally {\n        // Reset the submitting flag after the process is complete\n        this.isSubmitting = false;\n      }\n    },\n  },\n\n  /**\n   * Lifecycle hook: Runs when the component is mounted.\n   * Checks the Raspberry Pi status immediately and every 2 seconds.\n   */\n  mounted() {\n    this.checkRaspberryStatus(); // Initial check\n    // setInterval(this.checkRaspberryStatus, 2000); // Check every 2 seconds\n  },\n};\n</script>\n\n<style scoped>\n/* Styling for the message creation form container */\n.message-create {\n  max-width: 600px;\n  margin: auto;\n  padding: 20px;\n  background: #f9f9f9;\n  border-radius: 10px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n}\n\n/* Title styling */\n.message-title {\n  text-align: center;\n  font-size: 24px;\n  margin-bottom: 20px;\n}\n\n/* Styling for the labels */\n.label,\n.label2 {\n  font-size: 16px;\n}\n\n/* Styling for the input field */\ninput {\n  width: 50%;\n  max-width: 400px;\n  padding: 10px;\n  font-size: 16px;\n  margin-bottom: 5px;\n}\n\n/* Styling for error and success messages */\n.success {\n  color: green;\n  font-size: 16px;\n  text-align: center;\n  margin-top: 10px;\n}\n\n.error {\n  color: red;\n  font-size: 16px;\n  text-align: center;\n  margin-top: 10px;\n}\n\n/* Styling for the submit button */\nbutton {\n  padding: 12px;\n  background-color: gray;\n  color: white;\n  border: none;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n/* Hover effect for the submit button */\nbutton:hover {\n  background-color: rgba(36, 72, 36, 0.89);\n}\n\n/* Disabled button state */\nbutton:disabled {\n  background-color: lightgray;\n  cursor: not-allowed;\n}\n\n/* Raspberry Pi online/offline status messages */\n.status-online {\n  color: green;\n  font-size: 16px;\n  text-align: center;\n}\n\n.status-offline {\n  color: red;\n  font-size: 16px;\n  text-align: center;\n}\n</style>\n","import { render } from \"./EmergencyView.vue?vue&type=template&id=65f6520b&scoped=true\"\nimport script from \"./EmergencyView.vue?vue&type=script&lang=js\"\nexport * from \"./EmergencyView.vue?vue&type=script&lang=js\"\n\nimport \"./EmergencyView.vue?vue&type=style&index=0&id=65f6520b&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-65f6520b\"]])\n\nexport default __exports__","<template>\n  <div class=\"messages-container\">\n    <!-- Title for the messages list -->\n    <h2 class=\"messages-title\">Gesendete Nachrichten</h2>\n\n    <!-- Display loading indicator while messages are being fetched -->\n    <div v-if=\"loading\" class=\"loading\">⏳ Lade Nachrichten...</div>\n\n    <!-- Display messages once they have been loaded -->\n    <div v-else>\n      <!-- Iterate over the messages and display each one using the MessageItem component -->\n      <MessageItem\n        v-for=\"message in messages\"\n        :key=\"message.id\"\n        :text=\"message.content\"\n        :date=\"message.created_at\"\n        :state=\"message.status\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport MessageItem from \"@/components/MessageItem.vue\";\n\nexport default {\n  components: { MessageItem },\n  data() {\n    return {\n      // Array to store the list of messages\n      messages: [],\n      // Flag to indicate loading state\n      loading: true,\n      // ID of the polling interval for message updates\n      intervalId: null,\n    };\n  },\n  async created() {\n    // Fetch messages when the component is created\n    await this.getMessages();\n    // Start polling to refresh messages periodically\n    this.startPolling();\n  },\n  beforeUnmount() {\n    // Stop polling when the component is destroyed to clean up resources\n    this.stopPolling();\n  },\n  methods: {\n    // Fetch messages from the API\n    async getMessages() {\n      try {\n        // Make a GET request to fetch the messages\n        let response = await fetch(\"http://192.168.104.45/api/messages/\", {\n          method: \"GET\",\n        });\n\n        // Check if the response is successful\n        if (!response.ok)\n          throw new Error(`HTTP-Fehler! Status: ${response.status}`);\n\n        // Parse and store the messages, then update the loading state\n        this.messages = await response.json();\n        this.loading = false;\n      } catch (error) {\n        // Log any errors that occur during the fetch process\n        console.error(\"Fehler beim Abrufen der Nachrichten:\", error);\n        this.loading = false;\n      }\n    },\n\n    // Start polling to fetch new messages periodically\n    startPolling() {\n      // Poll every 4 seconds to get updated messages\n      this.intervalId = setInterval(this.getMessages, 4000);\n    },\n\n    // Stop polling when the component is about to be unmounted\n    stopPolling() {\n      if (this.intervalId) clearInterval(this.intervalId);\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Styling for the container of the messages list */\n.messages-container {\n  max-width: 600px;\n  margin: auto;\n  padding: 20px;\n  background: #f9f9f9;\n  border-radius: 10px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n}\n\n/* Styling for the title of the messages list */\n.messages-title {\n  text-align: center;\n  font-size: 24px;\n  margin-bottom: 20px;\n}\n\n/* Styling for the loading indicator */\n.loading {\n  text-align: center;\n  font-size: 16px;\n  color: #777;\n}\n</style>\n","<template>\n  <div class=\"message-item\">\n    <!-- Message text displaying the formatted message with dynamic user input -->\n    <div class=\"message-text\">\n      Die Eltern von <strong>{{ text }}</strong> bitte zum Check-in kommen\n    </div>\n\n    <div class=\"message-meta\">\n      <!-- Formatted date of the message -->\n      <span class=\"message-date\">{{ formattedDate }}</span>\n\n      <div class=\"message-state\">\n        <!-- Display the message's current state with corresponding class styling -->\n        <span :class=\"statusClass\"> {{ translatedState }} </span>\n\n        <!-- Tooltip info icon that toggles visibility of the message's status explanation -->\n        <span class=\"info-icon\" @click=\"toggleTooltip\">❓</span>\n\n        <!-- Tooltip providing more details about the current message state -->\n        <div v-if=\"showTooltip\" class=\"tooltip\">\n          {{ statusExplanation }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"MessageItem\",\n  props: {\n    // Prop for the message text\n    text: String,\n    // Prop for the message date\n    date: String,\n    // Prop for the message state (status)\n    state: String,\n  },\n  data() {\n    return {\n      // State to toggle the visibility of the tooltip\n      showTooltip: false,\n    };\n  },\n  computed: {\n    // Computed property to format the date using toLocaleString\n    formattedDate() {\n      return new Date(this.date).toLocaleString();\n    },\n\n    // Translates the state to a human-readable format\n    translatedState() {\n      const statusTranslations = {\n        received: \"Wartet auf Freigabe\",\n        approved: \"Wird angezeigt\",\n        rejected: \"Wurde abgelehnt\",\n        sent: \"An AV Gesendet\",\n        displayed: \"Wurde angezeigt\",\n      };\n      return statusTranslations[this.state] || this.state;\n    },\n\n    // Provides a detailed explanation of the message's status\n    statusExplanation() {\n      const explanations = {\n        received:\n          \"Das AV-Team hat deine Nachricht erhalten. Es entscheidet jetzt wann und ob es deine Nachricht auf der LED-Wall anzeigt. Du wirst hier informiert, sobald es eine Entscheidung trifft\",\n        approved:\n          \"Das AV-Team zeigt deine Nachricht gerade auf der LED-Wall an.\",\n        rejected:\n          \"Das AV-Team hat entschieden deine Nachricht nicht auf der LED-Wall anzuzeigen.\",\n        sent: \"Deine Nachricht wird gerade an das AV-Team gesendet, ist aber noch nicht dort angekommen.\",\n        displayed:\n          \"Deine Nachricht ist jetzt nicht mehr auf der LED-Wall zu sehen. Sie wurde aber angezeigt.\",\n      };\n      return explanations[this.state] || \"\";\n    },\n  },\n  methods: {\n    // Toggles the visibility of the tooltip when the info icon is clicked\n    toggleTooltip() {\n      this.showTooltip = !this.showTooltip;\n    },\n\n    // Returns the appropriate CSS class based on the current message state\n    statusClass() {\n      return {\n        \"status-pending\": this.state === \"received\",\n        \"status-success\": this.state === \"approved\",\n        \"status-error\": this.state === \"rejected\",\n        \"status-sent\": this.state === \"sent\",\n        \"status-displayed\": this.state === \"displayed\",\n      };\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Styling for the overall message item container */\n.message-item {\n  display: flex;\n  flex-direction: column;\n  background: white;\n  padding: 25px;\n  margin-bottom: 10px;\n  border-radius: 8px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  position: relative;\n}\n\n/* Styling for the message text */\n.message-text {\n  font-size: 16px;\n  color: #333;\n}\n\n/* Styling for the metadata section (date and status) */\n.message-meta {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 10px;\n  font-size: 14px;\n  color: #666;\n}\n\n/* Container for the message state (status) and the tooltip icon */\n.message-state {\n  display: flex;\n  align-items: center;\n  position: relative;\n}\n\n/* Margin between the status text and the tooltip icon */\n.message-state span {\n  margin-right: 8px;\n}\n\n/* Styling for the tooltip info icon */\n.info-icon {\n  cursor: pointer;\n  font-size: 18px;\n  color: black;\n  margin-left: 8px;\n}\n\n/* Tooltip styling for displaying detailed status information */\n.tooltip {\n  position: absolute;\n  top: -75px;\n  transform: translateX(-50%);\n  background-color: #f8f9fa;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  font-size: 14px;\n  color: #333;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  width: 350px;\n  z-index: 10;\n}\n\n/* Styling for each message state (status) */\n.status-pending {\n  background: #f0ad4e;\n  color: white;\n}\n\n.status-success {\n  background: #5cb85c;\n  color: white;\n}\n\n.status-error {\n  background: #d9534f;\n  color: white;\n}\n\n.status-sent {\n  background: #5bc0de;\n  color: white;\n}\n\n.status-displayed {\n  background: #ffc107;\n  color: white;\n}\n</style>\n","import { render } from \"./MessageItem.vue?vue&type=template&id=386e3252&scoped=true\"\nimport script from \"./MessageItem.vue?vue&type=script&lang=js\"\nexport * from \"./MessageItem.vue?vue&type=script&lang=js\"\n\nimport \"./MessageItem.vue?vue&type=style&index=0&id=386e3252&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-386e3252\"]])\n\nexport default __exports__","import { render } from \"./StateView.vue?vue&type=template&id=4e32ca43&scoped=true\"\nimport script from \"./StateView.vue?vue&type=script&lang=js\"\nexport * from \"./StateView.vue?vue&type=script&lang=js\"\n\nimport \"./StateView.vue?vue&type=style&index=0&id=4e32ca43&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-4e32ca43\"]])\n\nexport default __exports__"],"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","$data","isRaspberryOnline","_hoisted_2","_hoisted_3","onSubmit","_cache","_withModifiers","args","$options","createMessage","type","id","$event","message","content","placeholder","onInput","validateInput","required","disabled","isValid","isSubmitting","_hoisted_4","successMessage","_hoisted_5","_createCommentVNode","errorMessage","_hoisted_6","_toDisplayString","data","status","methods","checkRaspberryStatus","console","log","response","fetch","method","this","ok","error","maxLength","isLengthValid","length","messageToSend","headers","body","JSON","stringify","Error","setTimeout","$router","push","mounted","__exports__","render","loading","_Fragment","_renderList","messages","_createBlock","_component_MessageItem","text","date","created_at","state","_createTextVNode","$props","formattedDate","_normalizeClass","statusClass","translatedState","onClick","toggleTooltip","showTooltip","statusExplanation","name","props","String","computed","Date","toLocaleString","statusTranslations","received","approved","rejected","sent","displayed","explanations","components","MessageItem","intervalId","created","getMessages","startPolling","beforeUnmount","stopPolling","json","setInterval","clearInterval"],"sourceRoot":""}